/*
 *  Util.cpp
 *
 *  Copyright (c) 2017 Tobias Wood.
 *
 *  This Source Code Form is subject to the terms of the Mozilla Public
 *  License, v. 2.0. If a copy of the MPL was not distributed with this
 *  file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 */

#include "Util.h"
#include "Macro.h"

const std::string &GetVersion() {
    // This file is generated by CMake to create a static version string
    #include "VersionFile"
    return Version;
}

std::string StripExt(const std::string &filename) {
    std::size_t dot = filename.find_last_of(".");
    if (dot != std::string::npos) {
        /* Deal with .nii.gz files */
        if (filename.substr(dot) == ".gz") {
            dot = filename.find_last_of(".", dot - 1);
        }
        return filename.substr(0, dot);
    } else {
        return filename;
    }
}

std::string GetExt(const std::string &filename) {
    std::size_t dot = filename.find_last_of(".");
    if (dot != std::string::npos) {
        /* Deal with .nii.gz files */
        if (filename.substr(dot) == ".gz") {
            dot = filename.find_last_of(".", dot - 1);
        }
        return filename.substr(dot);
    } else {
        FAIL("No extension found in string: " << filename);
    }
}

std::string Basename(const std::string &path) {
    std::size_t slash = path.find_last_of("/");
    if (slash != std::string::npos) {
        return StripExt(path.substr(slash));
    } else {
        return StripExt(path);
    }
}